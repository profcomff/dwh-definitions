"""Dwh_schemas_actualization_1

Revision ID: efcc7fa8c029
Revises: 4892e78eb989
Create Date: 2024-04-27 21:40:44.574775

"""

from alembic import op
import sqlalchemy as sa
import os
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'efcc7fa8c029'
down_revision = '4892e78eb989'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.revoke_on_table(
        (
            "test_dwh_stg_social_read"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_social_read"
        ),
        {'SELECT'},
        '"STG_SOCIAL".vk_groups',
    )
    op.revoke_on_table(
        (
            "test_dwh_stg_social_write"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_social_write"
        ),
        {'INSERT', 'SELECT', 'DELETE', 'UPDATE', 'TRUNCATE'},
        '"STG_SOCIAL".vk_groups',
    )
    op.revoke_on_table(
        "test_dwh_stg_social_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_social_all",
        {'REFERENCES', 'INSERT', 'SELECT', 'DELETE', 'UPDATE', 'TRUNCATE', 'TRIGGER'},
        '"STG_SOCIAL".vk_groups',
    )
    op.drop_table('vk_groups', schema='STG_SOCIAL')
    op.create_table_schema("STG_ACHIEVEMENT")
    op.create_table(
        'achievement',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('picture', sa.String(), nullable=False),
        sa.Column('owner_user_id', sa.Integer(), nullable=False),
        sa.Column('create_ts', sa.DateTime(), nullable=False),
        sa.Column('update_ts', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        schema='STG_ACHIEVEMENT',
    )
    op.create_table(
        'achievement_receiver',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('achievement_id', sa.Integer(), nullable=False),
        sa.Column('create_ts', sa.DateTime(), nullable=False),
        sa.Column('update_ts', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        schema='STG_ACHIEVEMENT',
    )
    op.create_table(
        'vk_group',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('group_id', sa.Integer(), nullable=False),
        sa.Column('confirmation_token', sa.String(), nullable=False),
        sa.Column('secret_key', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        schema='STG_SOCIAL',
    )
    op.create_group(
        "test_dwh_stg_achievement_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_read"
    )
    op.create_group(
        "test_dwh_stg_achievement_write"
        if os.getenv("ENVIRONMENT") != "production"
        else "prod_dwh_stg_achievement_write"
    )
    op.create_group(
        "test_dwh_stg_achievement_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_all"
    )
    op.grant_on_schema(
        (
            "test_dwh_stg_achievement_read"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_read"
        ),
        "STG_ACHIEVEMENT",
    )
    op.grant_on_schema(
        (
            "test_dwh_stg_achievement_write"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_write"
        ),
        "STG_ACHIEVEMENT",
    )
    op.grant_on_schema(
        "test_dwh_stg_achievement_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_all",
        "STG_ACHIEVEMENT",
    )
    op.grant_on_table(
        (
            "test_dwh_stg_achievement_read"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_read"
        ),
        ['SELECT'],
        '"STG_ACHIEVEMENT".achievement',
    )
    op.grant_on_table(
        (
            "test_dwh_stg_achievement_read"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_read"
        ),
        ['SELECT'],
        '"STG_ACHIEVEMENT".achievement_receiver',
    )
    op.grant_on_table(
        (
            "test_dwh_stg_achievement_write"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_write"
        ),
        ['SELECT', 'UPDATE', 'DELETE', 'TRUNCATE', 'INSERT'],
        '"STG_ACHIEVEMENT".achievement',
    )
    op.grant_on_table(
        (
            "test_dwh_stg_achievement_write"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_write"
        ),
        ['SELECT', 'UPDATE', 'DELETE', 'TRUNCATE', 'INSERT'],
        '"STG_ACHIEVEMENT".achievement_receiver',
    )
    op.grant_on_table(
        "test_dwh_stg_achievement_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_all",
        ['ALL'],
        '"STG_ACHIEVEMENT".achievement',
    )
    op.grant_on_table(
        "test_dwh_stg_achievement_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_all",
        ['ALL'],
        '"STG_ACHIEVEMENT".achievement_receiver',
    )
    op.grant_on_table(
        "test_dwh_stg_social_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_social_read",
        ['SELECT'],
        '"STG_SOCIAL".vk_group',
    )
    op.grant_on_table(
        "test_dwh_stg_social_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_social_write",
        ['SELECT', 'UPDATE', 'DELETE', 'TRUNCATE', 'INSERT'],
        '"STG_SOCIAL".vk_group',
    )
    op.grant_on_table(
        "test_dwh_stg_social_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_social_all",
        ['ALL'],
        '"STG_SOCIAL".vk_group',
    )
    op.add_column('scope', sa.Column('button_id', sa.Integer(), nullable=False), schema='STG_SERVICES')
    op.add_column('scope', sa.Column('is_required', sa.Boolean(), nullable=False), schema='STG_SERVICES')
    op.add_column('webhook_storage', sa.Column('event_ts', sa.DateTime(), nullable=False), schema='STG_SOCIAL')
    op.alter_column('raw_html', 'url', existing_type=sa.VARCHAR(length=256), nullable=False, schema='STG_TIMETABLE')
    op.alter_column('raw_html', 'raw_html', existing_type=sa.TEXT(), nullable=False, schema='STG_TIMETABLE')
    op.alter_column('raw_html_old', 'url', existing_type=sa.VARCHAR(length=256), nullable=False, schema='STG_TIMETABLE')
    op.alter_column('raw_html_old', 'raw_html', existing_type=sa.TEXT(), nullable=False, schema='STG_TIMETABLE')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.revoke_on_table(
        "test_dwh_stg_social_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_social_all",
        ['all'],
        '"STG_SOCIAL".vk_group',
    )
    op.revoke_on_table(
        "test_dwh_stg_social_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_social_write",
        ['write'],
        '"STG_SOCIAL".vk_group',
    )
    op.revoke_on_table(
        "test_dwh_stg_social_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_social_read",
        ['read'],
        '"STG_SOCIAL".vk_group',
    )
    op.revoke_on_table(
        "test_dwh_stg_achievement_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_all",
        ['ALL'],
        '"STG_ACHIEVEMENT".achievement_receiver',
    )
    op.revoke_on_table(
        "test_dwh_stg_achievement_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_all",
        ['ALL'],
        '"STG_ACHIEVEMENT".achievement',
    )
    op.revoke_on_table(
        (
            "test_dwh_stg_achievement_write"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_write"
        ),
        ['SELECT', 'UPDATE', 'DELETE', 'TRUNCATE', 'INSERT'],
        '"STG_ACHIEVEMENT".achievement_receiver',
    )
    op.revoke_on_table(
        (
            "test_dwh_stg_achievement_write"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_write"
        ),
        ['SELECT', 'UPDATE', 'DELETE', 'TRUNCATE', 'INSERT'],
        '"STG_ACHIEVEMENT".achievement',
    )
    op.revoke_on_table(
        (
            "test_dwh_stg_achievement_read"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_read"
        ),
        ['SELECT'],
        '"STG_ACHIEVEMENT".achievement_receiver',
    )
    op.revoke_on_table(
        (
            "test_dwh_stg_achievement_read"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_read"
        ),
        ['SELECT'],
        '"STG_ACHIEVEMENT".achievement',
    )
    op.revoke_on_schema(
        "test_dwh_stg_achievement_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_all",
        "STG_ACHIEVEMENT",
    )
    op.revoke_on_schema(
        (
            "test_dwh_stg_achievement_write"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_write"
        ),
        "STG_ACHIEVEMENT",
    )
    op.revoke_on_schema(
        (
            "test_dwh_stg_achievement_read"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_dwh_stg_achievement_read"
        ),
        "STG_ACHIEVEMENT",
    )
    op.drop_table('vk_group', schema='STG_SOCIAL')
    op.drop_table('achievement_receiver', schema='STG_ACHIEVEMENT')
    op.drop_table('achievement', schema='STG_ACHIEVEMENT')
    op.delete_group(
        "test_dwh_stg_achievement_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_all"
    )
    op.delete_group(
        "test_dwh_stg_achievement_write"
        if os.getenv("ENVIRONMENT") != "production"
        else "prod_dwh_stg_achievement_write"
    )
    op.delete_group(
        "test_dwh_stg_achievement_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_stg_achievement_read"
    )
    op.drop_table_schema("STG_ACHIEVEMENT")
    op.create_table(
        'vk_groups',
        sa.Column(
            'id',
            sa.INTEGER(),
            server_default=sa.text('nextval(\'"STG_SOCIAL".vk_groups_id_seq\'::regclass)'),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column('confirmation_token', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('secret_key', sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column('create_ts', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column('update_ts', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint('id', name='vk_groups_pkey'),
        schema='STG_SOCIAL',
    )
    op.grant_on_table(
        "test_test_dwh_stg_social_all" if os.getenv("ENVIRONMENT") != "production" else "prod_test_dwh_stg_social_all",
        {'REFERENCES', 'INSERT', 'SELECT', 'DELETE', 'UPDATE', 'TRUNCATE', 'TRIGGER'},
        '"STG_SOCIAL".vk_groups',
    )
    op.grant_on_table(
        (
            "test_test_dwh_stg_social_write"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_test_dwh_stg_social_write"
        ),
        {'INSERT', 'SELECT', 'DELETE', 'UPDATE', 'TRUNCATE'},
        '"STG_SOCIAL".vk_groups',
    )
    op.grant_on_table(
        (
            "test_test_dwh_stg_social_read"
            if os.getenv("ENVIRONMENT") != "production"
            else "prod_test_dwh_stg_social_read"
        ),
        {'SELECT'},
        '"STG_SOCIAL".vk_groups',
    )
    op.alter_column('raw_html_old', 'raw_html', existing_type=sa.TEXT(), nullable=True, schema='STG_TIMETABLE')
    op.alter_column('raw_html_old', 'url', existing_type=sa.VARCHAR(length=256), nullable=True, schema='STG_TIMETABLE')
    op.alter_column('raw_html', 'raw_html', existing_type=sa.TEXT(), nullable=True, schema='STG_TIMETABLE')
    op.alter_column('raw_html', 'url', existing_type=sa.VARCHAR(length=256), nullable=True, schema='STG_TIMETABLE')
    op.drop_column('webhook_storage', 'event_ts', schema='STG_SOCIAL')
    op.drop_column('scope', 'is_required', schema='STG_SERVICES')
    op.drop_column('scope', 'button_id', schema='STG_SERVICES')
    # ### end Alembic commands ###
