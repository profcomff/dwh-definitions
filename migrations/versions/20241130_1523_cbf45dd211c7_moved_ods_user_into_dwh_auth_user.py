"""moved ODS.user into DWH.auth_user

Revision ID: cbf45dd211c7
Revises: b9023536db5b
Create Date: 2024-11-30 15:23:01.677920

"""

import os

import sqlalchemy as sa
from alembic import op


# revision identifiers, used by Alembic.
revision = 'cbf45dd211c7'
down_revision = 'b9023536db5b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_ODS_USER_info_id', table_name='info', schema='ODS_USER')
    op.revoke_on_table(
        "test_dwh_ods_user_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_read",
        ['SELECT'],
        '"ODS_USER".info',
    )
    op.revoke_on_table(
        "test_dwh_ods_user_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_write",
        ['SELECT', 'UPDATE', 'DELETE', 'TRUNCATE', 'INSERT'],
        '"ODS_USER".info',
    )
    op.revoke_on_table(
        "test_dwh_ods_user_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_all",
        ['ALL'],
        '"ODS_USER".info',
    )
    op.add_column(
        'info',
        sa.Column('vk_name', sa.String(), nullable=True, comment="user's vk_name from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('city', sa.String(), nullable=True, comment="user's city from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('hometown', sa.String(), nullable=True, comment="user's hometown from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('location', sa.String(), nullable=True, comment="user's current city from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('github_name', sa.String(), nullable=True, comment="user's github_name from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('telegram_name', sa.String(), nullable=True, comment="user's telegram_name stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column(
            'home_phone_number', sa.String(), nullable=True, comment="user's home_phone_number from stg userdata"
        ),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column(
            'education_level', sa.String(), nullable=True, comment='Bachelor/Master/Specialist from stg userdata'
        ),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('university', sa.String(), nullable=True, comment="user's university from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('group', sa.String(), nullable=True, comment="user's group from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('faculty', sa.String(), nullable=True, comment="user's faculty from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('position', sa.String(), nullable=True, comment="user's position in university from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column(
            'student_id_number', sa.String(), nullable=True, comment="user's student_id_number from stg userdata"
        ),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column(
            'department', sa.String(), nullable=True, comment="user's department in university from stg userdata"
        ),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column(
            'mode_of_study', sa.String(), nullable=True, comment='full-time/correspondence education from stg userdata'
        ),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('full_name', sa.String(), nullable=True, comment="user's full_name from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('birth_date', sa.String(), nullable=True, comment="user's birth_date from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('photo', sa.String(), nullable=True, comment="user's photo(https://) from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('sex', sa.String(), nullable=True, comment='male/female from stg userdata'),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('job', sa.String(), nullable=True, comment="user's job from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column('work_location', sa.String(), nullable=True, comment="user's work_location from stg userdata"),
        schema='DWH_AUTH_USER',
    )
    op.add_column(
        'info',
        sa.Column(
            'is_deleted', sa.Boolean(), nullable=True, comment='If True, user was deleted in backend. Default=False'
        ),
        schema='DWH_AUTH_USER',
    )
    op.alter_column(
        'info',
        'id',
        existing_type=sa.INTEGER(),
        comment='primary key',
        existing_nullable=False,
        autoincrement=True,
        schema='DWH_AUTH_USER',
    )
    op.alter_column(
        'info',
        'email',
        existing_type=sa.VARCHAR(),
        comment="user's email from stg userdata",
        existing_nullable=True,
        schema='DWH_AUTH_USER',
    )
    op.alter_column(
        'info',
        'phone_number',
        existing_type=sa.VARCHAR(),
        comment="user's phone_number from stg userdata",
        existing_nullable=True,
        schema='DWH_AUTH_USER',
    )
    op.revoke_on_table(
        "test_dwh_ods_user_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_read",
        ['SELECT'],
        '"ODS_USER".info',
    )
    op.revoke_on_table(
        "test_dwh_ods_user_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_write",
        ['SELECT', 'UPDATE', 'DELETE', 'TRUNCATE', 'INSERT'],
        '"ODS_USER".info',
    )
    op.revoke_on_table(
        "test_dwh_ods_user_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_all",
        ['ALL'],
        '"ODS_USER".info',
    )
    op.revoke_on_schema(
        "test_dwh_ods_user_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_read", "ODS_USER"
    )
    op.revoke_on_schema(
        "test_dwh_ods_user_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_write", "ODS_USER"
    )
    op.revoke_on_schema(
        "test_dwh_ods_user_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_all", "ODS_USER"
    )
    op.drop_table('info', schema='ODS_USER')
    op.delete_group("test_dwh_ods_user_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_read")
    op.delete_group(
        "test_dwh_ods_user_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_write"
    )
    op.delete_group("test_dwh_ods_user_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_all")
    op.drop_table_schema("ODS_USER")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_schema("ODS_USER")
    op.create_table(
        'info',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False, comment='primary key'),
        sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True, comment="user's email from stg userdata"),
        sa.Column(
            'phone_number',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's phone_number from stg userdata",
        ),
        sa.Column(
            'vk_name', sa.VARCHAR(), autoincrement=False, nullable=True, comment="user's vk_name from stg userdata"
        ),
        sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True, comment="user's city from stg userdata"),
        sa.Column(
            'hometown', sa.VARCHAR(), autoincrement=False, nullable=True, comment="user's hometown from stg userdata"
        ),
        sa.Column(
            'location',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's current city from stg userdata",
        ),
        sa.Column(
            'github_name',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's github_name from stg userdata",
        ),
        sa.Column(
            'telegram_name',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's telegram_name stg userdata",
        ),
        sa.Column(
            'home_phone_number',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's home_phone_number from stg userdata",
        ),
        sa.Column(
            'education_level',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment='Bachelor/Master/Specialist from stg userdata',
        ),
        sa.Column(
            'university',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's university from stg userdata",
        ),
        sa.Column('group', sa.VARCHAR(), autoincrement=False, nullable=True, comment="user's group from stg userdata"),
        sa.Column(
            'faculty', sa.VARCHAR(), autoincrement=False, nullable=True, comment="user's faculty from stg userdata"
        ),
        sa.Column(
            'position',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's position in university from stg userdata",
        ),
        sa.Column(
            'student_id_number',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's student_id_number from stg userdata",
        ),
        sa.Column(
            'department',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's department in university from stg userdata",
        ),
        sa.Column(
            'mode_of_study',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment='full-time/correspondence education from stg userdata',
        ),
        sa.Column(
            'full_name', sa.VARCHAR(), autoincrement=False, nullable=True, comment="user's full_name from stg userdata"
        ),
        sa.Column(
            'birth_date',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's birth_date from stg userdata",
        ),
        sa.Column(
            'photo',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's photo(https://) from stg userdata",
        ),
        sa.Column('sex', sa.VARCHAR(), autoincrement=False, nullable=True, comment='male/female from stg userdata'),
        sa.Column('job', sa.VARCHAR(), autoincrement=False, nullable=True, comment="user's job from stg userdata"),
        sa.Column(
            'work_location',
            sa.VARCHAR(),
            autoincrement=False,
            nullable=True,
            comment="user's work_location from stg userdata",
        ),
        sa.Column(
            'is_deleted',
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment='If True, user was deleted in backend. Default=False',
        ),
        sa.PrimaryKeyConstraint('id', name='info_pkey'),
        schema='ODS_USER',
    )
    op.create_group("test_dwh_ods_user_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_all")
    op.create_group(
        "test_dwh_ods_user_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_write"
    )
    op.create_group("test_dwh_ods_user_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_read")
    op.grant_on_schema(
        "test_dwh_ods_user_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_all", "ODS_USER"
    )
    op.grant_on_schema(
        "test_dwh_ods_user_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_write", "ODS_USER"
    )
    op.grant_on_schema(
        "test_dwh_ods_user_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_read", "ODS_USER"
    )
    op.grant_on_table(
        "test_dwh_ods_user_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_all",
        ['ALL'],
        '"ODS_USER".info',
    )
    op.grant_on_table(
        "test_dwh_ods_user_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_write",
        ['SELECT', 'UPDATE', 'DELETE', 'TRUNCATE', 'INSERT'],
        '"ODS_USER".info',
    )
    op.grant_on_table(
        "test_dwh_ods_user_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_read",
        ['SELECT'],
        '"ODS_USER".info',
    )
    op.alter_column(
        'info',
        'phone_number',
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="user's phone_number from stg userdata",
        existing_nullable=True,
        schema='DWH_AUTH_USER',
    )
    op.alter_column(
        'info',
        'email',
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="user's email from stg userdata",
        existing_nullable=True,
        schema='DWH_AUTH_USER',
    )
    op.alter_column(
        'info',
        'id',
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment='primary key',
        existing_nullable=False,
        autoincrement=True,
        schema='DWH_AUTH_USER',
    )
    op.drop_column('info', 'is_deleted', schema='DWH_AUTH_USER')
    op.drop_column('info', 'work_location', schema='DWH_AUTH_USER')
    op.drop_column('info', 'job', schema='DWH_AUTH_USER')
    op.drop_column('info', 'sex', schema='DWH_AUTH_USER')
    op.drop_column('info', 'photo', schema='DWH_AUTH_USER')
    op.drop_column('info', 'birth_date', schema='DWH_AUTH_USER')
    op.drop_column('info', 'full_name', schema='DWH_AUTH_USER')
    op.drop_column('info', 'mode_of_study', schema='DWH_AUTH_USER')
    op.drop_column('info', 'department', schema='DWH_AUTH_USER')
    op.drop_column('info', 'student_id_number', schema='DWH_AUTH_USER')
    op.drop_column('info', 'position', schema='DWH_AUTH_USER')
    op.drop_column('info', 'faculty', schema='DWH_AUTH_USER')
    op.drop_column('info', 'group', schema='DWH_AUTH_USER')
    op.drop_column('info', 'university', schema='DWH_AUTH_USER')
    op.drop_column('info', 'education_level', schema='DWH_AUTH_USER')
    op.drop_column('info', 'home_phone_number', schema='DWH_AUTH_USER')
    op.drop_column('info', 'telegram_name', schema='DWH_AUTH_USER')
    op.drop_column('info', 'github_name', schema='DWH_AUTH_USER')
    op.drop_column('info', 'location', schema='DWH_AUTH_USER')
    op.drop_column('info', 'hometown', schema='DWH_AUTH_USER')
    op.drop_column('info', 'city', schema='DWH_AUTH_USER')
    op.drop_column('info', 'vk_name', schema='DWH_AUTH_USER')
    op.grant_on_table(
        "test_dwh_ods_user_all" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_all",
        ['ALL'],
        '"ODS_USER".info',
    )
    op.grant_on_table(
        "test_dwh_ods_user_write" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_write",
        ['SELECT', 'UPDATE', 'DELETE', 'TRUNCATE', 'INSERT'],
        '"ODS_USER".info',
    )
    op.grant_on_table(
        "test_dwh_ods_user_read" if os.getenv("ENVIRONMENT") != "production" else "prod_dwh_ods_user_read",
        ['SELECT'],
        '"ODS_USER".info',
    )
    op.create_index('ix_ODS_USER_info_id', 'info', ['id'], unique=False, schema='ODS_USER')
    # ### end Alembic commands ###
